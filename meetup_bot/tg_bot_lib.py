from datetime import datetime
from django.utils import timezone

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from email_validate import validate

from .models import Block, Lecture


def get_menu_keyboard(is_speaker):
    keyboard = [
        [InlineKeyboardButton('üìã  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data='program')],
        [InlineKeyboardButton('üó£  –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', callback_data='ask_speaker')],
        [InlineKeyboardButton('ü§ù  –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è', callback_data='acquaint')],
        [InlineKeyboardButton('üí∏  –î–æ–Ω–∞—Ç', callback_data='donate')],
    ]
    if is_speaker:
        keyboard.append(
            [InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', callback_data='respond_to_questions')],
        )
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup


def get_acquaintance_keyboard():
    keyboard = [
        [InlineKeyboardButton('–î–∞', callback_data='accept')],
        [InlineKeyboardButton('–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—É', callback_data='update_questionnaire')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')],  
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup


def check_email(update, context):
    is_valid_email = validate(
        update.message.text,
        check_blacklist=False,
        check_dns=False,
        check_smtp=False
    )
    if not is_valid_email:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
        )
    return is_valid_email

def get_blocks_keyboard():
    blocks = Block.objects.filter(end__gte=timezone.now())
    keyboard = [
        [InlineKeyboardButton(block.title, callback_data=f'block {block.pk}')] for block in blocks
    ]
    keyboard.append(
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')]
    )
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup

def get_lectures_keyboard(block_pk):
    lectures = Lecture.objects.filter(block__pk=block_pk).filter(end__gte=timezone.now())
    keyboard = []
    for lecture in lectures:
        if lecture.title != '–û–±–µ–¥':
            keyboard.append(
                [InlineKeyboardButton(lecture.title, callback_data=f'lecture {lecture.pk}')]
            )
    keyboard.append(
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')]
    )
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup

def back_to_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup

def get_next_question():
    keyboard = [
        [InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å –≤ —á–∞—Ç', callback_data='reply')],
        [InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data='next')],
        [InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data='previous')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup

def get_speakers_keyboard(lecture_pk):
    lecture = Lecture.objects.get(pk=lecture_pk)
    speakers = lecture.speakers.all()
    keyboard = [
        [InlineKeyboardButton(
            speaker.first_name,
            callback_data=f'speaker {speaker.pk}'
        )
        for speaker in speakers]]
    keyboard.append(
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')]
    )
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup

def get_text_notification(user):
    incoming_questions_count = user.incoming_questions.count()
    if incoming_questions_count == 0:
        text = '–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫–ª–∞–¥—É! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å'
    elif incoming_questions_count == 2:
        text = '–î–ª—è –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 3 –≤–æ–ø—Ä–æ—Å–∞!'
    elif incoming_questions_count in (4, 9):
        text = f'–î–ª—è –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {incoming_questions_count + 1} –≤–æ–ø—Ä–æ—Å–æ–≤!'
    else:
        text = ''
    return text

def accept_acquaintance_keyboard(user_tg_id):
    keyboard = [
        [InlineKeyboardButton('–ü–æ–¥—Ö–æ–¥–∏—Ç!', callback_data=f'get_contact {user_tg_id}')],
        [InlineKeyboardButton('–ú–æ–∂–Ω–æ –µ—â—ë –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', callback_data='next')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup